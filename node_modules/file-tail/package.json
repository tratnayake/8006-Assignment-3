{
  "name": "file-tail",
  "version": "0.3.0",
  "description": "Like tail -F command in unix.  Runs on Windows (no fs.watch).  Contains command line version.",
  "main": "index.js",
  "bin": {
    "nftail": "bin/file-tail"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "file-size-watcher": "~0.2.0",
    "commander": "~2.1.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alexmiddeleer/node-file-tail.git"
  },
  "keywords": [
    "tail",
    "file",
    "log",
    "watch"
  ],
  "author": {
    "name": "Alex Middeleer"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/alexmiddeleer/node-file-tail/issues"
  },
  "homepage": "https://github.com/alexmiddeleer/node-file-tail",
  "readme": "node-file-tail\r\n==============\r\n\r\nA tiny, portable tail module for Node.js.  Similar to tail -F in Unix.  Extends node-file-size-watcher.  Does not rely on fs.watch, thus works in Windows. Install globally to use the command line tool.\r\n\r\n###Usage\r\n\r\n```js\r\n\tft = fileTailer.startTailing('logfile.log');\r\n\tft.on('line', function(line){\r\n\t\t// do stuff\r\n\t});\r\n```\r\n\r\n###Options \r\n\r\nStart tailing with just a file descriptor string, or pass in an object with these properties:\r\n\r\n```js\r\nstartTailing({\r\n\tfd: aFileDescriptor,           // Required\r\n\tms: aFileCheckingInterval,     // Defaults to 100 (milliseconds)\r\n\tmode: 'line',                  // The other option is 'stream'\r\n\tencoding: 'utf8'               // see Node's fs.createReadStream\r\n\tonErr: function(error){};      // immediately listen for 'error' event\r\n});\r\n```\r\n###Events\r\n\r\n * `'error'`      -- All errors including ENOENTs are emitted through this.\r\n * `'tailError'`  -- `'Error'` with ENOENTs ignored; use if you don't care if the file is missing.\r\n * `'line'`       -- emitted whenever tailed file grows by a line (or many), unless mode is `'stream'`.\r\n * `'stream'`     -- If mode is `'stream'`, will emit a Node.js stream object instead of lines.  Use this if you need to preserve every byte or want to handle the details yourself.\r\n\r\nLastly, file-tail objects are just types of file-size-watchers, so you can use everything they have as well.  See (https://github.com/alexmiddeleer/node-file-size-watcher)\r\n\r\n###Example\r\n\r\nTry it out with with this little script (Use with `Node script.js fileToTail`):\r\n\r\n```js\r\nvar fd = process.argv[2],\r\nft = require('file-tail').startTailing(fd);\r\n\r\nft.on('line', function(line) {\r\n\tconsole.log(line);\r\n});\r\n```\r\n\r\n###CLI Usage\r\n\r\nTo use this tool on the command line, just install it globally (`npm install -g`).  Then run `nftail <filename>`. \r\n\r\n###Help out\r\n\r\nBug reports, feedback, or code contributions are appreciated.  All pull requests will be reviewed.\r\n",
  "readmeFilename": "README.md",
  "_id": "file-tail@0.3.0",
  "dist": {
    "shasum": "d8646e81a712a36bdf75fe7a79901076f7c58ca3"
  },
  "_from": "file-tail@",
  "_resolved": "https://registry.npmjs.org/file-tail/-/file-tail-0.3.0.tgz"
}
