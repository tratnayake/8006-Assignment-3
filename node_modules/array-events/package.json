{
  "name": "array-events",
  "homepage": "https://github.com/khrome/array-events",
  "version": "0.1.4",
  "main": "array-events.js",
  "description": "Events and more for arrays",
  "keywords": [
    "array",
    "async",
    "events"
  ],
  "author": {
    "name": "Abbey Hawk Sparrow",
    "email": "@khrome",
    "url": "http://patternweaver.com"
  },
  "contributors": [],
  "bugs": {
    "url": "https://github.com/khrome/array-events/issues"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/khrome/array-events.git"
  },
  "dependencies": {
    "extended-emitter": "*",
    "async-arrays": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "array-events.js\n===============\n\nIs an Array extension class which adds asynchronous functions to Array as well as firing events on 'remove', 'add' or 'change'\n\n    var EventedArray = require('array-events');\n    var myArray = new EventedArray();\n\nevents\n------\n\n*change* : fired any time an element is added or removed\n\n*add* : fired any time an element is added\n\n*remove* : fired any time an element is removed \n\nemitter functions\n-----------------\n\nEventedArrays are also [Emitters](http://docs.nodejitsu.com/articles/getting-started/control-flow/what-are-event-emitters) but have an expanded syntax from [extended-emitter](https://github.com/khrome/extended-emitter) and the additional `.when()` call.\n\n    myArray.on('change', function(event){ });\n    myArray.once('change', function(event){ });\n    myArray.off('change', function(event){ });\n    myArray.emit('change'[, arguments]);\n\nasync functions\n---------------\n\nforEachEmission : execute serially\n\n    myArray.forEachEmission(function(item, index, done){\n        somethingAsynchronous(function(){\n            done();\n        });\n    }, function(){\n        //we're all done!\n    });\n    \nforAllEmissions : execute all jobs in parallel\n\n    myArray.forAllEmissions(function(item, index, done){\n        somethingAsynchronous(function(){\n            done();\n        });\n    }, function(){\n        //we're all done!\n    });\n    \nforAllEmissionsInPool : execute all jobs in parallel up to a maximum #, then queue for later\n\n    myArray.forAllEmissionsInPool(poolSize, function(item, index, done){\n        somethingAsynchronous(function(){\n            done();\n        });\n    }, function(){\n        //we're all done!\n    });\n    \nutility functions\n-----------------\n\ncontains : does the array contain this element?\n\n    new EventedArray(['dog', 'cat', 'mouse']).contains('cat') //returns true;\n    \ncombine : generate a new array that is the union of the provided arrays\n\n    new EventedArray(['dog', 'cat']).combine(['mouse']) //returns a new array  ['dog', 'cat', 'mouse'];\n    \nerase : generate a new array without the member provided\n    \n    new EventedArray(['dog', 'cat', 'mouse']).erase('cat') //returns a new array ['dog', 'mouse'];\n    \nEventedArray.is : is the provided object an instance of EventedArray\n\n    EventedArray.is(new EventedArray()); //returns true\n    EventedArray.is([]) //returns false\n    \n\nTesting\n-------\njust run\n    \n    mocha\n\nEnjoy,\n\n-Abbey Hawk Sparrow",
  "readmeFilename": "README.md",
  "_id": "array-events@0.1.4",
  "_from": "array-events@"
}
